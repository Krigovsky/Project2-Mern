{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (images.length > 0) {\n      media = await imageUpload(images);\n    }\n    const res = await postDataAPI('posts', {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: {\n        ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n\n    // todo notification\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: {\n        ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n    return;\n  }\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = {\n    ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = {\n    ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token);\n\n    // todo notification\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const reportPost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const reportExist = post.reports.find(report => report === auth.user._id);\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"You have already reported this post.\"\n      }\n    });\n  }\n  const newPost = {\n    ...post\n  };\n  newPost.reports.push(auth.user._id);\n  dispatch({\n    type: POST_TYPES.REPORT_POST,\n    payload: newPost\n  });\n  try {\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = {\n    ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: {\n      ...auth,\n      user: newUser\n    }\n  });\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = {\n    ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: {\n      ...auth,\n      user: newUser\n    }\n  });\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"sources":["C:/Users/LukeKrigovsky/Desktop/Work/uni/mern-social-media/client/src/redux/actions/postAction.js"],"sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\n\r\n\r\nexport const POST_TYPES = {\r\n  CREATE_POST: \"CREATE_POST\",\r\n  LOADING_POST: \"LOADING_POST\",\r\n  GET_POSTS: \"GET_POSTS\",\r\n  UPDATE_POST: \"UPDATE_POST\",\r\n  GET_POST: \"GET_POST\",\r\n  DELETE_POST: \"DELETE_POST\",\r\n  REPORT_POST: \"REPORT_POST\",\r\n  SAVE_POST: \"SAVE_POST\",\r\n};\r\n\r\nexport const createPost = ({content, images, auth, socket}) => async dispatch => {\r\n    let media = [];\r\n\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} });\r\n\r\n        if(images.length > 0){ media = await imageUpload(images)}\r\n\r\n        const res = await postDataAPI('posts', {content, images: media}, auth.token );\r\n\r\n        \r\n        dispatch({ type: POST_TYPES.CREATE_POST , payload: {...res.data.newPost, user: auth.user} });\r\n        \r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\r\n        \r\n\r\n        // todo notification\r\n        const msg = {\r\n          id: res.data.newPost._id,\r\n          text: \"Added a new post.\",\r\n          recipients: res.data.newPost.user.followers,\r\n          url: `/post/${res.data.newPost._id}`,\r\n          content, \r\n          image: media[0].url\r\n        };\r\n\r\n        dispatch(createNotify({msg, auth, socket}));\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {\r\n                error: err.response.data.msg\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getPosts = (token) => async dispatch => {\r\n    try {\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: true  });\r\n        const res = await getDataAPI('posts', token);\r\n        dispatch({ type: POST_TYPES.GET_POSTS, payload: {...res.data, page: 2} });\r\n\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n    } catch (err) {\r\n        dispatch({\r\n          type: GLOBALTYPES.ALERT,\r\n          payload: {\r\n            error: err.response.data.msg,\r\n          },\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const updatePost = ({ content, images, auth, status }) => async (dispatch) => {\r\n  let media = [];\r\n    const imgNewUrl = images.filter(img => !img.url);\r\n    const imgOldUrl = images.filter(img => img.url);\r\n    if(status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length){\r\n        return;\r\n    }\r\n  try {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n    if (imgNewUrl.length > 0) {\r\n      media = await imageUpload(imgNewUrl);\r\n    }\r\n    const res = await patchDataAPI(\r\n      `post/${status._id}`,\r\n      { content, images: [...imgOldUrl, ...media] },\r\n      auth.token\r\n    );\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const likePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = {...post, likes: [...post.likes, auth.user]};\r\n\r\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n  socket.emit(\"likePost\", newPost);\r\n  \r\n  try {\r\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Liked your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n      content: post.content,\r\n      image: post.images[0].url,\r\n    };\r\n\r\n    dispatch(createNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const unLikePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = { ...post, likes: post.likes.filter(like => like._id !== auth.user._id) };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"unLikePost\", newPost);\r\n\r\n  \r\n  try {\r\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Liked your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`, \r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const getPost = ({ detailPost, id, auth }) => async (dispatch) => {\r\n  if(detailPost.every(post => post._id !== id )){\r\n    try {\r\n      const res = await getDataAPI(`post/${id}`, auth.token);\r\n      dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post})\r\n\r\n\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: {\r\n          error: err.response.data.msg,\r\n        },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport const deletePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\r\n\r\n  try {\r\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: post._id,\r\n      text: \"Added a new post.\",\r\n      recipients: res.data.newPost.user.followers,\r\n      url: `/post/${post._id}`,\r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const reportPost = ({ post, auth }) => async (dispatch) => {\r\n\r\n  const reportExist = post.reports.find(report => report === auth.user._id);\r\n\r\n  if (reportExist && reportExist.length > 0) {\r\n    return dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: \"You have already reported this post.\" },\r\n    });\r\n  }\r\n    const newPost = { ...post };\r\n    newPost.reports.push(auth.user._id);\r\n\r\n  dispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\r\n  \r\n\r\ntry {\r\n  const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\r\n  dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n} catch (err) {\r\n  dispatch({\r\n    type: GLOBALTYPES.ALERT,\r\n    payload: {\r\n      error: err.response.data.msg,\r\n    },\r\n  });\r\n}\r\n};\r\n\r\nexport const savePost = ({ post, auth }) => async (dispatch) => {\r\n  const newUser = {...auth.user, saved: [...auth.user.saved, post._id] };\r\n\r\n  dispatch({ type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}});\r\n\r\n\r\n  try {\r\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const unSavePost = ({ post, auth }) => async (dispatch) => {\r\n  const newUser = { ...auth.user, saved: auth.user.saved.filter(id => id !== post._id) };\r\n\r\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n  try {\r\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}